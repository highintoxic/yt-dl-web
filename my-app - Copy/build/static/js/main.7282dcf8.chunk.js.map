{"version":3,"sources":["ColorModeSwitcher.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","aria-label","variant","color","marginLeft","onClick","icon","App","useState","loading","setLoading","query","setQuery","results","setResults","useEffect","timeoutID","setTimeout","params","encodeURI","fetch","then","res","json","catch","e","clearTimeout","ResultRender","map","r","boxSize","w","bg","borderWidth","borderRadius","overflow","h","display","flexDirection","src","bestThumbnail","url","rounded","justifySelf","fit","flex","templateRows","rowStart","rowEnd","alignSelf","title","spacing","direction","align","colorScheme","id","console","log","mode","method","headers","theme","textAlign","minH","p","templateColumns","colStart","colEnd","alignItems","justifyContent","placeholder","isRequired","value","onChange","target","rowSpan","mt","shadow","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.7282dcf8.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import React, { useState, useEffect } from \"react\"\nimport {\n  ChakraProvider,\n  Box,\n  Grid,\n  theme,\n  Input,\n  InputGroup,\n  GridItem,\n  Image,\n  Text,\n  Button,\n  Stack\n} from \"@chakra-ui/react\"\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\"\n\n\n\nexport const App = () => { \n\n  const [loading, setLoading] = useState(true)\n  const [query, setQuery] = useState('')\n  const [results, setResults] = useState([])\n\n  useEffect(() => {\n    const timeoutID = setTimeout(() => {\n      const params = encodeURI(query)\n      fetch('https://localhost:4000/query?q=' + params)\n        .then(res => res.json())\n        .then(res => {\n          setLoading(false)\n          setResults([...res])\n        })\n        .catch(e => e)\n    }, 1000)\n    \n    return () => {\n      clearTimeout(timeoutID)\n    }\n  }, [query])\n\n\n  const onAudioClick = (id) => {\n    console.log(id)\n    fetch('https://localhost:4000/download?id=' + encodeURI(id),{\n      mode: 'no-cors',\n      method: \"get\",\n      headers: {\n        \"Content-Type\": \"application/mp3\"\n      }\n    })\n      .then(res => console.log(res))\n  }\n  \n  const ResultRender = () => {\n    if(query === '' || !query) return (<p>A search query is required.</p>)\n    if(loading === true) return (<p>Loading...</p>)\n    if(results === []) return (<p>Loading...</p>)\n    if(typeof results === \"undefined\") return (<p>Loading...</p>)\n    else return (\n      results.map(r => (\n      <Box boxSize=\"sm\" w=\"100%\" bg=\"#318097\" borderWidth=\"1px\" borderRadius=\"lg\" overflow=\"hidden\" h=\"min-content\" display=\"flex\" flexDirection=\"row\">\n        <Image src={r.bestThumbnail.url} w=\"20%\" rounded=\"md\" justifySelf=\"left\" fit=\"contain\" />\n        <Grid flex=\"auto\" templateRows=\"30% 70%\">\n          <GridItem rowStart={1} rowEnd={2} justifySelf=\"center\" alignSelf=\"center\">\n            <Text fontSize=\"lg\" >{r.title}</Text>\n          </GridItem>\n          <GridItem rowStart={2} rowEnd={3} justifySelf=\"center\" alignSelf=\"center\">\n            <Stack spacing=\"0.5rem\" direction=\"row\" align=\"center\">\n              <Button colorScheme=\"teal\" w=\"7rem\" size=\"sm\" onClick={() => onAudioClick(r.url)}>MP3 - Audio</Button>\n              <Button colorScheme=\"teal\" w=\"7rem\" size=\"sm\">MP4 - Video</Button>\n            </Stack>\n          </GridItem>\n        </Grid>\n      </Box>\n      ))\n    )\n\n\n\n  }\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Box textAlign=\"center\" fontSize=\"xl\">\n        <Grid minH=\"100vh\" p={3} templateColumns=\"repeat(12, 1fr)\" templateRows=\"repeat(12, auto)\">\n          <GridItem colStart={12} colEnd={13} display=\"flex\" alignItems=\"flex-start\" justifyContent=\"flex-end\">\n            <ColorModeSwitcher />\n          </GridItem>\n          <GridItem colStart={3} colEnd={11} rowStart={1} rowEnd={2} display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n            <InputGroup>\n              <Input size=\"lg\" placeholder=\"Search...\" alignSelf=\"center\" justifySelf=\"center\" isRequired value={query} onChange={(e) => setQuery(e.target.value)} />\n            </InputGroup>\n          </GridItem>\n          <GridItem colStart={3} colEnd={11} rowStart={2} rowEnd={13} rowSpan='auto' >\n            <Box p=\"0.5rem\" color=\"white\" mt=\"4\" bg=\"teal.500\" rounded=\"md\" shadow=\"md\" display=\"flex\" flexDirection=\"column\">\n              <ResultRender />\n            </Box>\n          </GridItem>\n        </Grid>\n      </Box>\n    </ChakraProvider>\n  )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}